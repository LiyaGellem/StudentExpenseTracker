/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pennywise.TLMHDBWP;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.JOptionPane;

/**
 *
 * @author THARI
 */
public class PennyWiseForm extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public PennyWiseForm() {
        initComponents();
        
         // Clear the file every time the app starts
    try {
        BufferedWriter writer = new BufferedWriter(new FileWriter("PennyWise.txt"));
        writer.write(""); // overwrite file with nothing
        writer.close();
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error clearing file on startup.");
    }

    // Also clear the textArea visually
    textArea.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextFieldAllowance = new javax.swing.JTextField();
        jTextFieldDate = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextFieldGroceries = new javax.swing.JTextField();
        jTextFieldTransport = new javax.swing.JTextField();
        jTextFieldSelfCare = new javax.swing.JTextField();
        jTextFieldOther = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 153, 153));

        jLabel1.setFont(new java.awt.Font("HP Simplified Hans", 1, 36)); // NOI18N
        jLabel1.setText("PennyWise");

        jLabel2.setFont(new java.awt.Font("Yu Gothic Light", 1, 12)); // NOI18N
        jLabel2.setText("Name:");

        jLabel3.setFont(new java.awt.Font("Yu Gothic Light", 1, 12)); // NOI18N
        jLabel3.setText("Surname:");

        jLabel4.setFont(new java.awt.Font("Yu Gothic Light", 1, 12)); // NOI18N
        jLabel4.setText("Financial Support:");

        jLabel5.setFont(new java.awt.Font("Yu Gothic Light", 1, 12)); // NOI18N
        jLabel5.setText("Monthly Allowance:");

        jLabel6.setFont(new java.awt.Font("Yu Gothic Medium", 1, 14)); // NOI18N
        jLabel6.setText("Enter the Day You Receive Your Allowance:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "                ", "BURSARY", "SELF-FUNDED", "NSFAS" }));

        jTextFieldDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDateActionPerformed(evt);
            }
        });

        textArea.setBackground(new java.awt.Color(204, 204, 255));
        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Evaluate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Edit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 0, 0));
        jButton3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Yu Gothic Light", 1, 12)); // NOI18N
        jLabel7.setText("Groceries:");

        jLabel8.setFont(new java.awt.Font("HP Simplified Hans", 1, 24)); // NOI18N
        jLabel8.setText("Expenses");

        jLabel10.setFont(new java.awt.Font("Yu Gothic Light", 1, 12)); // NOI18N
        jLabel10.setText("Other:");

        jLabel11.setFont(new java.awt.Font("Yu Gothic UI Light", 1, 12)); // NOI18N
        jLabel11.setText("Self-Care:");

        jLabel12.setFont(new java.awt.Font("Yu Gothic Light", 1, 12)); // NOI18N
        jLabel12.setText("Transport:");

        jTextFieldGroceries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldGroceriesActionPerformed(evt);
            }
        });

        jTextFieldSelfCare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSelfCareActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldAllowance, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(126, 126, 126))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))))
            .addGroup(layout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldDate, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextFieldSelfCare, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                        .addComponent(jTextFieldOther, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jTextFieldTransport, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextFieldGroceries, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(504, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextFieldAllowance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldGroceries, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldTransport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jTextFieldSelfCare, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldOther, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextFieldDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public void refreshTextArea() {
        textArea.setText(""); // Clear previous content
        try (BufferedReader br = new BufferedReader(new FileReader("PennyWise.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                // Skip empty lines
                if (line.trim().isEmpty()) {
                    continue;
                }

                // Check if it's the delete message
                if (line.contains("All student information")) {
                    textArea.append(line + "\n");
                    continue;
                }

                // Parse the student data
                String[] parts = line.split("#");
                if (parts.length >= 9) {
                    // Display in readable format
                    String name = parts[0];
                    String surname = parts[1];
                    String financialSupport = parts[2];
                    double allowance = Double.parseDouble(parts[3]);
                    String date = parts[4];
                    double groceries = Double.parseDouble(parts[5]);
                    double transport = Double.parseDouble(parts[6]);
                    double selfCare = Double.parseDouble(parts[7]);
                    double other = Double.parseDouble(parts[8]);

                    // Calculate totals
                    double totalExpenses = groceries + transport + selfCare + other;
                    double remaining = allowance - totalExpenses;

                    // Generate advice
                    String advice;
                    if (remaining > 1000) {
                        advice = "You're doing great with your spending!";
                    } else if (remaining >= 500) {
                        advice = "Consider saving a bit more if possible.";
                    } else if (remaining >= 0) {
                        advice = "Try cutting back on non-essentials.";
                    } else {
                        advice = "You've overspent. Review your budget!";
                    }

                    // Format for display
                    textArea.append("Name: " + name + "\n");
                    textArea.append("Surname: " + surname + "\n");
                    textArea.append("Financial Support: " + financialSupport + "\n");
                    textArea.append("Monthly Allowance: R" + allowance + "\n");
                    textArea.append("Date: " + date + "\n");
                    textArea.append("--------------------------\n");
                    textArea.append("Expenses Breakdown:\n");
                    textArea.append("Groceries: R" + groceries + "\n");
                    textArea.append("Transport: R" + transport + "\n");
                    textArea.append("Self-Care: R" + selfCare + "\n");
                    textArea.append("Other: R" + other + "\n");
                    textArea.append("Total Expenses: R" + totalExpenses + "\n");
                    textArea.append("Remaining Balance: R" + remaining + "\n");
                    textArea.append(advice + "\n");
                    textArea.append("--------------------------\n\n");
                } else {
                    // If the format doesn't match, just display the line as is
                    textArea.append(line + "\n");
                }
            }
        } catch (IOException | NumberFormatException ex) {
            ex.printStackTrace();
        }
}

    private void jTextFieldDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDateActionPerformed
private String formatData() {
        String name = jTextField1.getText();
        String surname = jTextField2.getText();
        String financialSupport = (String) jComboBox1.getSelectedItem();
        String allowance = jTextFieldAllowance.getText();
        String date = jTextFieldDate.getText();
        return "Name: " + name + "\nSurname: " + surname + "\nFinancial Support: " + financialSupport
                + "\nMonthly Allowance: " + allowance + "\nDate: " + date + "\n--------------------------\n";
}
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
                                                 
        // TODO add your handling code here:
        
        //textArea.setText("");
        try {
        // Collect input values
        String name = jTextField1.getText();
        String surname = jTextField2.getText();
        String financialSupport = (String) jComboBox1.getSelectedItem();
        double allowance = Double.parseDouble(jTextFieldAllowance.getText());
        String date = jTextFieldDate.getText();
        
        double groceries = Double.parseDouble(jTextFieldGroceries.getText());
        double transport = Double.parseDouble(jTextFieldTransport.getText());
        double selfCare = Double.parseDouble(jTextFieldSelfCare.getText());
        double other = Double.parseDouble(jTextFieldOther.getText());
        
        // Calculate total expenses
        double totalExpenses = groceries + transport + selfCare + other;
        // Calculate remaining balance
        double remaining = allowance - totalExpenses;
        
        // Create advice based on balance
        String advice;
        if (remaining > 1000) {
            advice = "You're doing great with your spending!";
        } else if (remaining >= 500) {
            advice = "Consider saving a bit more if possible.";
        } else if (remaining >= 0) {
            advice = "Try cutting back on non-essentials.";
        } else {
            advice = "You've overspent. Review your budget!";
        }
        
        // Initialize expense singleton and clear previous data for current student
        Expense expense = Expense.getInstance();
        expense.clearAllData(); // Clear previous data for current evaluation
        expense.setMonthlyAllowance(allowance);
        
        // Add expenses
        expense.addExpense("Groceries", groceries, date);
        expense.addExpense("Transport", transport, date);
        expense.addExpense("Self-care", selfCare, date);
        expense.addExpense("Other", other, date);
        
        try {
            // Append to file instead of overwriting
            expense.appendStudentToFile("PennyWise.txt", name, surname, financialSupport, date, advice);
            
            // Read from file to display all students
            refreshTextArea();
            
            // Clear input fields for next student
            clearInputFields();
            
            JOptionPane.showMessageDialog(this, "Student expenses recorded successfully!", 
                    "Success", JOptionPane.INFORMATION_MESSAGE);
            
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving to file: " + e.getMessage());
        }
        } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter valid numbers for monetary values.");
    }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
                                                
        // Edit button functionality
        Expense expense = Expense.getInstance();
        
        // Only edit if there are expenses to edit
        if (expense.getExpenseCount() == 0) {
            JOptionPane.showMessageDialog(this, "No expenses to edit. Please add expenses first.", 
                    "Edit Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Ask user which expense they want to edit
        String[] options = {"Groceries", "Transport", "Self-care", "Other"};
        int choice = JOptionPane.showOptionDialog(this, 
                "Which expense would you like to edit?",
                "Edit Expense", 
                JOptionPane.DEFAULT_OPTION, 
                JOptionPane.QUESTION_MESSAGE, 
                null, 
                options, 
                options[0]);
        
        if (choice < 0) {
            // User canceled
            return;
        }
        
        // Find expense with the matching description
        String description = options[choice];
        int expenseIndex = -1;
        
        for (int i = 0; i < expense.getExpenseCount(); i++) {
            if (expense.getDescription(i).equalsIgnoreCase(description)) {
                expenseIndex = i;
                break;
            }
        }
        
        if (expenseIndex == -1) {
            JOptionPane.showMessageDialog(this, "No " + description + " expense found.", 
                    "Edit Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Get current amount
        double currentAmount = expense.getAmount(expenseIndex);
        
        // Ask for new amount
        String input = JOptionPane.showInputDialog(this, 
                "Current " + description + " amount: R" + currentAmount + "\nEnter new amount:", 
                currentAmount);
        
        if (input == null || input.trim().isEmpty()) {
            // User canceled
            return;
        }
        
        try {
            double newAmount = Double.parseDouble(input);
            
            if (newAmount < 0) {
                JOptionPane.showMessageDialog(this, "Amount cannot be negative.", 
                        "Edit Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Get current date
            String date = expense.getDate(expenseIndex);
            
            // Update expense
            if (expense.editExpense(expenseIndex, description, newAmount, date)) {
                // Save to file
                expense.saveExpensesToFile("PennyWise.txt");
                // Update the expense field in the form
                if (description.equalsIgnoreCase("Groceries")) {
                    jTextFieldGroceries.setText(String.valueOf(newAmount));
                } else if (description.equalsIgnoreCase("Transport")) {
                    jTextFieldTransport.setText(String.valueOf(newAmount));
                } else if (description.equalsIgnoreCase("Self-care")) {
                    jTextFieldSelfCare.setText(String.valueOf(newAmount));
                } else if (description.equalsIgnoreCase("Other")) {
                    jTextFieldOther.setText(String.valueOf(newAmount));
                }
                // Refresh the text area
                refreshTextArea();
                JOptionPane.showMessageDialog(this, "Expense updated successfully!",
                        "Edit Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update expense. Please check allowance and values.", 
                        "Edit Error", JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid amount. Please enter a valid number.", 
                    "Edit Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(PennyWiseForm.class.getName()).log(Level.SEVERE, null, ex);
        }           
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButtonEvaluateActionPerformed(java.awt.event.ActionEvent evt) {                                             
    // This is where you paste the new logic.
    Expense expense = Expense.getInstance();

    // Get allowance input
    double allowance;
    try {
        allowance = Double.parseDouble(jTextFieldAllowance.getText());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid number for the allowance.");
        return;
    }

    // Set allowance in Expense
    expense.setMonthlyAllowance(allowance);

    StringBuilder summary = new StringBuilder();
    summary.append("Name: ").append(jTextField1.getText()).append("\n");
    summary.append("Surname: ").append(jTextField2.getText()).append("\n");
    summary.append("Financial Support Type: ").append(jComboBox1.getSelectedItem()).append("\n");
    summary.append("Monthly Allowance: R").append(jTextFieldAllowance.getText()).append("\n");
    summary.append("Date: ").append(jTextFieldDate.getText()).append("\n\n");

    summary.append("Expenses:\n");
    
    // Clear previous entries (optional if needed each time)
    expense.getDescriptions().clear();
    expense.getAmounts().clear();
    expense.getDates().clear();

    // Date for entries
    String entryDate = jTextFieldDate.getText();
    
        // Get and add expenses
    try {
        double groceries = Double.parseDouble(jTextFieldGroceries.getText());
        if (groceries > 0) expense.addExpense("Groceries", groceries, entryDate);

        double transport = Double.parseDouble(jTextFieldTransport.getText());
        if (transport > 0) expense.addExpense("Transport", transport, entryDate);

        double selfcare = Double.parseDouble(jTextFieldSelfCare.getText());
        if (selfcare > 0) expense.addExpense("Self-care", selfcare, entryDate);

        double other = Double.parseDouble(jTextFieldOther.getText());
        if (other > 0) expense.addExpense("Other", other, entryDate);

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter valid numbers for all expenses.");
        return;
    }


    if (!expense.getDescriptions().isEmpty()) {
        for (int i = 0; i < expense.getDescriptions().size(); i++) {
            summary.append("Description: ").append(expense.getDescriptions().get(i))
                   .append(", Amount: R").append(expense.getAmounts().get(i))
                   .append(", Date: ").append(expense.getDates().get(i)).append("\n");
        }
    } else {
        summary.append("No expenses recorded yet.\n");
    }

    double totalExpenses = expense.calculateTotalExpenses();
    double remaining = expense.calculateRemainingAllowance();

    summary.append("\nTotal Expenses: R").append(totalExpenses).append("\n");
    summary.append("Remaining Allowance: R").append(remaining).append("\n");

    // Advice logic
    String advice;
    double remainingPercent = (remaining / allowance) * 100;

    if (remaining <= 0) {
        advice = "You've overspent. Review your expenses.";
    } else if (remainingPercent < 20) {
        advice = "Try to cut back on expenses to save more.";
    } else if (remainingPercent <= 50) {
        advice = "Be cautious with your spending.";
    } else {
        advice = "You're managing your money well. Keep it up!";
    }

    summary.append("\nAdvice: ").append(advice).append("\n");

    // Show in text area
    textArea.setText(summary.toString());

    // Save to file
    try (FileWriter writer = new FileWriter("student_data.txt")) {
        writer.write(summary.toString());
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, "Error saving file: " + ex.getMessage());
    }

summary.append("\nTotal Expenses: R").append(expense.calculateTotalExpenses()).append("\n");
summary.append("Remaining Allowance: R").append(expense.calculateRemainingAllowance()).append("\n");

// Show in text area
textArea.setText(summary.toString());

// Save to file
try (FileWriter writer = new FileWriter("student_data.txt")) {
    writer.write(summary.toString());
} catch (IOException ex) {
    JOptionPane.showMessageDialog(this, "Error saving file: " + ex.getMessage());
}



}                                            

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
       // Delete button functionality
    // Ask for confirmation
    int confirm = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to delete all student information and expenses?", 
            "Confirm Delete", 
            JOptionPane.YES_NO_OPTION, 
            JOptionPane.WARNING_MESSAGE);
    
    if (confirm == JOptionPane.YES_OPTION) {
        // Clear the expense data
        Expense expense = Expense.getInstance();
        
        // Create a new instance to reset all data
        try {
            java.lang.reflect.Field instanceField = Expense.class.getDeclaredField("instance");
            instanceField.setAccessible(true);
            instanceField.set(null, null);
        } catch (Exception e) {
            // Fallback if reflection fails
            // Just reset the current instance
            expense = Expense.getInstance();
            expense.clearAllData();
        }
        
        // Clear all student information and expense fields
        clearInputFields();
        
        // Clear the text area
        textArea.setText("All student information and expenses have been deleted.");
        
        // Clear the file
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("PennyWise.txt"));
            writer.write("All student information and expenses have been deleted."); // Clear the file
            writer.close();
            
            // Show success message
            JOptionPane.showMessageDialog(this, "All student information and expenses have been successfully deleted.", 
                    "Delete Success", JOptionPane.INFORMATION_MESSAGE);
            
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error clearing file: " + e.getMessage(), 
                    "Delete Error", JOptionPane.ERROR_MESSAGE);
        }
    
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextFieldGroceriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldGroceriesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldGroceriesActionPerformed

    private void jTextFieldSelfCareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSelfCareActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSelfCareActionPerformed
 private void clearInputFields() {
        //Leave student info fields empty for next student
        jTextField1.setText("");          // Name
        jTextField2.setText("");          // Surname
        jComboBox1.setSelectedIndex(0);   // Financial Support
        jTextFieldAllowance.setText("");  // Monthly Allowance
        jTextFieldDate.setText("");       // Date

        // Clear expense fields
        jTextFieldGroceries.setText("");
        jTextFieldTransport.setText("");
        jTextFieldSelfCare.setText("");
        jTextFieldOther.setText("");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PennyWiseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PennyWiseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PennyWiseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PennyWiseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new PennyWiseForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextFieldAllowance;
    private javax.swing.JTextField jTextFieldDate;
    private javax.swing.JTextField jTextFieldGroceries;
    private javax.swing.JTextField jTextFieldOther;
    private javax.swing.JTextField jTextFieldSelfCare;
    private javax.swing.JTextField jTextFieldTransport;
    public static javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
